<?xml version="1.0" encoding="UTF-8"?>
<!--
//MIT License

//Copyright (c) 2021-2024 Peter Kirmeier

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
-->
<UserControl xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ctrls="clr-namespace:HitCounterManager.Controls;assembly=HitCounterManager.PCL"
        xmlns:c="clr-namespace:HitCounterManager.Common;assembly=HitCounterManager.PCL"
        xmlns:vm="clr-namespace:HitCounterManager.ViewModels;assembly=HitCounterManager.PCL"
        x:Class="HitCounterManager.Views.MainPage"
        x:DataType="vm:MainPageViewModel"
        Background="{DynamicResource MainWindowBackgroundBrush}">

	<UserControl.DataContext>
		<vm:MainPageViewModel />
	</UserControl.DataContext>

	<ScrollViewer Padding="0" Margin="6,4,0,0" AllowAutoHide="false">
		<StackPanel Margin="0,0,30,0" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

			<WrapPanel Margin="2">
				<WrapPanel.Styles>
					<OnPlatform>
						<OnPlatform.Default>
							<Style Selector="Button">
								<Setter Property="Margin" Value="1" />
								<Setter Property="Padding" Value="1,3" />
							</Style>
						</OnPlatform.Default>
						<On Options="Android, iOS">
							<Style Selector="Button">
								<Setter Property="Margin" Value="4" />
								<Setter Property="Padding" Value="4" />
							</Style>
						</On>
					</OnPlatform>
					<Style Selector="Button">
						<Setter Property="HorizontalAlignment" Value="Stretch" />
						<Setter Property="VerticalAlignment" Value="Stretch" />
					</Style>
					<Style Selector="Image">
						<Setter Property="Width" Value="20" />
						<Setter Property="Height" Value="20" />
						<Setter Property="HorizontalAlignment" Value="Center" />
						<Setter Property="VerticalAlignment" Value="Center" />
					</Style>
				</WrapPanel.Styles>

				<StackPanel Margin="0,0,10,0" Orientation="Horizontal">
					<Button Command="{Binding OpenPageSettings}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageSettings}" />
					</Button>
					<Button Command="{Binding SaveToDisk}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageSave}" />
					</Button>
					<Button Command="{Binding OpenWebsiteHome}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageWeb}" />
					</Button>
					<Button Command="{Binding OpenWebsiteTeamHitless}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageTeamHitless}" />
					</Button>
					<Button Command="{Binding CheckUpdatesOnline}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageUpdates}" />
					</Button>
					<Button Command="{Binding OpenPageAbout}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageAbout}" />
					</Button>
				</StackPanel>
				<StackPanel Margin="0,0,10,0" Orientation="Horizontal">
					<Button Command="{Binding OpenPageProfileAction}" CommandParameter="{x:Static vm:ProfileAction.Create}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageProfileCreate}" />
					</Button>
					<Button Command="{Binding OpenPageProfileAction}" CommandParameter="{x:Static vm:ProfileAction.Rename}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageProfileRename}" />
					</Button>
					<Button Command="{Binding OpenPageProfileAction}" CommandParameter="{x:Static vm:ProfileAction.Copy}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageProfileCopy}" />
					</Button>
					<Button Command="{Binding OpenPageProfileAction}" CommandParameter="{x:Static vm:ProfileAction.Delete}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageTrash}" />
					</Button>
				</StackPanel>
				<StackPanel Margin="0,0,10,0" Orientation="Horizontal">
					<Button Command="{Binding OpenPageSetAttempts}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageAttempts}" />
					</Button>
					<Button Command="{Binding #profileView.DataContext.ProfileSplitMoveUp}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageSplitUp}" />
					</Button>
					<Button Command="{Binding #profileView.DataContext.ProfileSplitMoveDown}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageSplitDown}" />
					</Button>
					<Button Command="{Binding #profileView.DataContext.ProfileSplitInsert}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Image Source="{DynamicResource ImageSplitInsert}" />
					</Button>
				</StackPanel>
				<StackPanel Margin="0" Orientation="Horizontal">
					<Button Command="{Binding #profileView.DataContext.ToggleReadOnlyMode}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding #profileView.DataContext.IsReadOnly}">
						<Button.Styles>
							<Style Selector="Button > Image">
								<Setter Property="Source" Value="{DynamicResource ImageLockOff}" />
							</Style>
							<Style Selector="Button.ImageButtonLocked > Image">
								<Setter Property="Source" Value="{DynamicResource ImageLockOn}" />
							</Style>
						</Button.Styles>
						<Image />
					</Button>
					<Button Command="{Binding ToggleAlwaysOnTop}" Classes="ImageButton" Classes.ImageButtonLocked="{Binding AlwaysOnTop}" IsVisible="{OnPlatform Default=True, Android=False, iOS=False}">
						<Image Source="{DynamicResource ImageAlwaysOnTop}" />
					</Button>
					<Button Command="{Binding ToggleDarkMode}" Classes="ImageButton">
						<Image Source="{DynamicResource ImageDarkMode}" />
					</Button>
				</StackPanel>
			</WrapPanel>

			<WrapPanel Margin="2" ItemHeight="46" HorizontalAlignment="Center">
				<WrapPanel.Styles>
					<Style Selector="Button">
						<Setter Property="Width" Value="82" />
					</Style>
				</WrapPanel.Styles>

				<ctrls:FramedImageButton MainColor="{DynamicResource ProfileResetBrush}" ImgSrc="{DynamicResource ImageProfileReset}"
						OnClickCommand="{Binding #profileView.DataContext.ProfileReset}" />
				<ctrls:FramedImageButton MainColor="{DynamicResource ProfilePBBrush}" ImgSrc="{DynamicResource ImageProfilePB}"
						OnClickCommand="{Binding #profileView.DataContext.ProfilePB}" />
				<ctrls:FramedImageButton MainColor="{DynamicResource ToggleTimerPauseBrush}"
						OnClickCommand="{Binding #profileView.DataContext.ToggleTimerPause}"
						Classes.TimerRunning="{Binding #profileView.DataContext.TimerRunning}">
					<ctrls:FramedImageButton.Styles>
						<Style Selector="ctrls|FramedImageButton">
							<Setter Property="ImgSrc" Value="{DynamicResource ImageTimerOff}" />
						</Style>
						<Style Selector="ctrls|FramedImageButton.TimerRunning">
							<Setter Property="ImgSrc" Value="{DynamicResource ImageTimerOn}" />
						</Style>
					</ctrls:FramedImageButton.Styles>
				</ctrls:FramedImageButton>
				<ctrls:FramedImageButton MainColor="{DynamicResource HitIncreaseBrush}" ImgSrc="{DynamicResource ImageHit}"
						OnClickCommand="{Binding #profileView.DataContext.HitIncrease}"
						OnRightClickCommand="{Binding #profileView.DataContext.HitDecrease}">
				</ctrls:FramedImageButton>
				<ctrls:FramedImageButton MainColor="{DynamicResource HitWayIncreaseBrush}" ImgSrc="{DynamicResource ImageHitWay}"
						OnClickCommand="{Binding #profileView.DataContext.HitWayIncrease}"
						OnRightClickCommand="{Binding #profileView.DataContext.HitWayDecrease}" />
				<ctrls:FramedImageButton MainColor="{DynamicResource SplitSelectNextBrush}" ImgSrc="{DynamicResource ImageNextSplit}"
						OnClickCommand="{Binding #profileView.DataContext.SplitSelectNext}"
						OnRightClickCommand="{Binding #profileView.DataContext.SplitSelectPrev}" />
			</WrapPanel>

			<ctrls:ProfileView Padding="0" Margin="0" x:Name="profileView"/>

		</StackPanel>
	</ScrollViewer>
</UserControl>
