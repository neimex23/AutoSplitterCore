#MIT License

#Copyright (c) 2021-2023 Peter Kirmeier

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# https://aka.ms/yaml
# RuntimeRID values: https://docs.microsoft.com/en-us/dotnet/core/rid-catalog

trigger:
- v2.x

stages:
- stage: Build

#  variables:
#    projectfile: '**/*.$(Agent.JobName).csproj'

  jobs:
  - job:
    strategy:
      maxParallel: 4
      matrix:
# Most Used
        win-x64:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-x64'
        linux-x64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-x64'
        osx-x64:
          PoolVmImg: 'macOS-latest'
          RuntimeRID: 'osx-x64'
# Windows
        win-x86:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-x86'
        win-arm:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-arm'
        win-arm64:
          PoolVmImg: 'windows-latest'
          RuntimeRID: 'win-arm64'
# Linux
        linux-musl-x64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-musl-x64'
        linux-arm:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-arm'
        linux-arm64:
          PoolVmImg: 'ubuntu-latest'
          RuntimeRID: 'linux-arm64'
# iOS
#   building using Xcode? https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/xcode?view=azure-devops
#   ios-arm64
# Android
#   building using Gradle? https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops
#   android-arm64

    variables:
      buildConfiguration: 'Release'

    pool:
      vmImage: '$(PoolVmImg)'

    steps:

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops
## does not seem to be required as I do not use or own nuget packages that I want to reference from Azure Artefacts
#    - task: NuGetAuthenticate@1
## does not seem to be required as the following build steps are using .net 6 already correctly
#    - task: UseDotNet@2
#      displayName: Use .NET 6 SDK
#      inputs:
#        packageType: sdk
#        version: 6.x

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(buildConfiguration) --runtime $(RuntimeRID) --self-contained false'
        publishWebProjects: false
        zipAfterPublish: false
        projects: '**/*.csproj'

    - task: Bash@3
      displayName: 'Assembly Variables'
      env:
        PROJECTFILE: '$(Build.SourcesDirectory)/Source/HitCounterManager/HitCounterManager.csproj'
      inputs:
        targetType: 'inline'
        script: |
          echo "Parsing '$PROJECTFILE' ..."
          grep "<Version>"         "$PROJECTFILE" | tee    Vars.txt | sed -e 's,^.*<Version>\([^<^>]*\)</Version>,##vso[task.setvariable variable=AssemblyVersionAttribute]\1,g'
          grep "<Product>"         "$PROJECTFILE" | tee -a Vars.txt | sed -e 's,^.*<Product>\([^<^>]*\)</Product>,##vso[task.setvariable variable=AssemblyProductAttribute]\1,g'
          grep "<TargetFramework>" "$PROJECTFILE" | tee -a Vars.txt | sed -e 's,^.*<TargetFramework>\([^<^>]*\)</TargetFramework>,##vso[task.setvariable variable=AssemblyTargetFrameworkAttribute]\1,g'
          echo "Read into variables:"
          cat Vars.txt
          rm -f Vars.txt

    - task: Bash@3
      displayName: 'Dump file tree'
      inputs:
        targetType: 'inline'
        script: |
          echo "Listing '$(Build.SourcesDirectory)' ..."
          find -L . -type f

    - task: ArchiveFiles@2
      condition: startsWith(variables['PoolVmImg'], 'windows')
      displayName: 'Archive $(Build.ArtifactStagingDirectory)'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/publish/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.zip'
        archiveType: 'zip'
        replaceExistingArchive: true
        verbose: true

    - task: ArchiveFiles@2
      condition: not(startsWith(variables['PoolVmImg'], 'windows'))
      displayName: 'Archive $(Build.ArtifactStagingDirectory)'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/Source/$(AssemblyProductAttribute)/bin/$(buildConfiguration)/$(AssemblyTargetFrameworkAttribute)/$(RuntimeRID)/publish/'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.DefinitionName).$(System.JobName)-$(AssemblyVersionAttribute)-PreRelease.tar.gz'
        archiveType: 'tar'
        tarCompression: 'gz'
        replaceExistingArchive: true
        verbose: true

#https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops

#- stage: Deploy
#  dependsOn: Build
#
# https://docs.microsoft.com/de-de/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#use-outputs-in-a-different-stage
#
#  jobs:
#  - job: Store
#    displayName: 'Deploy Artifacts'
#    pool:
#      vmImage: 'windows-latest'
#
#    steps:

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: PreRelease'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'Container'
        ArtifactName: 'PreRelease'
